<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wellness/activities/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wellness/activities/MainActivity.kt" />
              <option name="originalContent" value="package com.example.wellness.activities&#10;&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.fragment.app.Fragment&#10;import com.example.wellness.R&#10;import com.example.wellness.fragments.DashboardFragment&#10;import com.example.wellness.fragments.HabitsFragment&#10;import com.example.wellness.fragments.MoodsFragment&#10;import com.example.wellness.fragments.SettingsFragment&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    lateinit var bottomNavigationView: BottomNavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.activity_main)&#10;&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation)&#10;&#10;        // Set default fragment (Dashboard)&#10;        if (savedInstanceState == null) {&#10;            supportFragmentManager.beginTransaction()&#10;                .replace(R.id.fragment_container, DashboardFragment())&#10;                .commit()&#10;            bottomNavigationView.selectedItemId = R.id.navigation_dashboard&#10;        }&#10;&#10;        // Set up bottom navigation listener&#10;        bottomNavigationView.setOnItemSelectedListener { item -&gt;&#10;            when (item.itemId) {&#10;                R.id.navigation_dashboard -&gt; {&#10;                    loadFragment(DashboardFragment())&#10;                    true&#10;                }&#10;                R.id.navigation_habits -&gt; {&#10;                    loadFragment(HabitsFragment())&#10;                    true&#10;                }&#10;                R.id.navigation_moods -&gt; {&#10;                    loadFragment(MoodsFragment())&#10;                    true&#10;                }&#10;                R.id.navigation_settings -&gt; {&#10;                    loadFragment(SettingsFragment())&#10;                    true&#10;                }&#10;                else -&gt; false&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadFragment(fragment: Fragment) {&#10;        supportFragmentManager.beginTransaction()&#10;            .replace(R.id.fragment_container, fragment)&#10;            .commit()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.wellness.activities&#13;&#10;&#13;&#10;import android.os.Bundle&#13;&#10;import androidx.activity.enableEdgeToEdge&#13;&#10;import androidx.appcompat.app.AppCompatActivity&#13;&#10;import androidx.fragment.app.Fragment&#13;&#10;import com.example.wellness.R&#13;&#10;import com.example.wellness.fragments.DashboardFragment&#13;&#10;import com.example.wellness.fragments.HabitsFragment&#13;&#10;import com.example.wellness.fragments.MoodsFragment&#13;&#10;import com.example.wellness.fragments.SettingsFragment&#13;&#10;import com.example.wellness.utils.ThemeManager&#13;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView&#13;&#10;&#13;&#10;class MainActivity : AppCompatActivity() {&#13;&#10;&#13;&#10;    lateinit var bottomNavigationView: BottomNavigationView&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        // Apply theme before calling super.onCreate()&#13;&#10;        ThemeManager.applyTheme(this)&#13;&#10;&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        enableEdgeToEdge()&#13;&#10;        setContentView(R.layout.activity_main)&#13;&#10;&#13;&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation)&#13;&#10;&#13;&#10;        // Set default fragment (Dashboard)&#13;&#10;        if (savedInstanceState == null) {&#13;&#10;            supportFragmentManager.beginTransaction()&#13;&#10;                .replace(R.id.fragment_container, DashboardFragment())&#13;&#10;                .commit()&#13;&#10;            bottomNavigationView.selectedItemId = R.id.navigation_dashboard&#13;&#10;        }&#13;&#10;&#13;&#10;        // Set up bottom navigation listener&#13;&#10;        bottomNavigationView.setOnItemSelectedListener { item -&gt;&#13;&#10;            when (item.itemId) {&#13;&#10;                R.id.navigation_dashboard -&gt; {&#13;&#10;                    loadFragment(DashboardFragment())&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.navigation_habits -&gt; {&#13;&#10;                    loadFragment(HabitsFragment())&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.navigation_moods -&gt; {&#13;&#10;                    loadFragment(MoodsFragment())&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                R.id.navigation_settings -&gt; {&#13;&#10;                    loadFragment(SettingsFragment())&#13;&#10;                    true&#13;&#10;                }&#13;&#10;                else -&gt; false&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun loadFragment(fragment: Fragment) {&#13;&#10;        supportFragmentManager.beginTransaction()&#13;&#10;            .replace(R.id.fragment_container, fragment)&#13;&#10;            .commit()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wellness/fragments/SettingsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wellness/fragments/SettingsFragment.kt" />
              <option name="originalContent" value="package com.example.wellness.fragments&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.SharedPreferences&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.*&#10;import androidx.appcompat.app.AlertDialog&#10;import androidx.fragment.app.Fragment&#10;import com.example.wellness.R&#10;import com.example.wellness.services.HydrationReminderService&#10;&#10;class SettingsFragment : Fragment() {&#10;&#10;    private lateinit var sharedPreferences: SharedPreferences&#10;&#10;    // Hydration Reminders&#10;    private lateinit var switchWaterReminders: Switch&#10;    private lateinit var spinnerReminderInterval: Spinner&#10;    private lateinit var switchNotificationSound: Switch&#10;    private lateinit var switchVibration: Switch&#10;    private lateinit var btnTestNotification: Button&#10;&#10;    // App Preferences&#10;    private lateinit var spinnerTheme: Spinner&#10;    private lateinit var spinnerFontSize: Spinner&#10;&#10;    // Data Management&#10;    private lateinit var btnBackupData: Button&#10;    private lateinit var btnReinstall: Button&#10;    private lateinit var btnClearHabits: Button&#10;    private lateinit var btnClearMoods: Button&#10;    private lateinit var btnClearAllData: Button&#10;&#10;    // Advanced Features&#10;    private lateinit var spinnerChartDuration: Spinner&#10;    private lateinit var switchHomeWidget: Switch&#10;    private lateinit var switchStepCounter: Switch&#10;    private lateinit var switchShakeDetection: Switch&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        val view = inflater.inflate(R.layout.fragment_settings, container, false)&#10;&#10;        // Initialize SharedPreferences&#10;        sharedPreferences = requireActivity().getSharedPreferences(&quot;wellness_settings&quot;, Context.MODE_PRIVATE)&#10;&#10;        // Initialize views&#10;        initializeViews(view)&#10;&#10;        // Load saved settings&#10;        loadSettings()&#10;&#10;        // Set up listeners&#10;        setupListeners()&#10;&#10;        return view&#10;    }&#10;&#10;    private fun initializeViews(view: View) {&#10;        // Hydration Reminders&#10;        switchWaterReminders = view.findViewById(R.id.switch_water_reminders)&#10;        spinnerReminderInterval = view.findViewById(R.id.spinner_reminder_interval)&#10;        switchNotificationSound = view.findViewById(R.id.switch_notification_sound)&#10;        switchVibration = view.findViewById(R.id.switch_vibration)&#10;        btnTestNotification = view.findViewById(R.id.btn_test_notification)&#10;&#10;        // App Preferences&#10;        spinnerTheme = view.findViewById(R.id.spinner_theme)&#10;        spinnerFontSize = view.findViewById(R.id.spinner_font_size)&#10;&#10;        // Data Management&#10;        btnBackupData = view.findViewById(R.id.btn_backup_data)&#10;        btnReinstall = view.findViewById(R.id.btn_reinstall)&#10;        btnClearHabits = view.findViewById(R.id.btn_clear_habits)&#10;        btnClearMoods = view.findViewById(R.id.btn_clear_moods)&#10;        btnClearAllData = view.findViewById(R.id.btn_clear_all_data)&#10;&#10;        // Advanced Features&#10;        spinnerChartDuration = view.findViewById(R.id.spinner_chart_duration)&#10;        switchHomeWidget = view.findViewById(R.id.switch_home_widget)&#10;        switchStepCounter = view.findViewById(R.id.switch_step_counter)&#10;        switchShakeDetection = view.findViewById(R.id.switch_shake_detection)&#10;    }&#10;&#10;    private fun loadSettings() {&#10;        // Load hydration settings&#10;        switchWaterReminders.isChecked = sharedPreferences.getBoolean(&quot;water_reminders_enabled&quot;, false)&#10;        spinnerReminderInterval.setSelection(sharedPreferences.getInt(&quot;reminder_interval&quot;, 2)) // Default: 1 hour (index 2)&#10;        switchNotificationSound.isChecked = sharedPreferences.getBoolean(&quot;notification_sound&quot;, true)&#10;        switchVibration.isChecked = sharedPreferences.getBoolean(&quot;vibration_enabled&quot;, true)&#10;&#10;        // Load app preferences&#10;        spinnerTheme.setSelection(sharedPreferences.getInt(&quot;theme&quot;, 0)) // Default: Light Mode&#10;        spinnerFontSize.setSelection(sharedPreferences.getInt(&quot;font_size&quot;, 1)) // Default: Medium&#10;&#10;        // Load advanced features&#10;        spinnerChartDuration.setSelection(sharedPreferences.getInt(&quot;chart_duration&quot;, 0)) // Default: 1 Week&#10;        switchHomeWidget.isChecked = sharedPreferences.getBoolean(&quot;home_widget_enabled&quot;, false)&#10;        switchStepCounter.isChecked = sharedPreferences.getBoolean(&quot;step_counter_enabled&quot;, false)&#10;        switchShakeDetection.isChecked = sharedPreferences.getBoolean(&quot;shake_detection_enabled&quot;, false)&#10;    }&#10;&#10;    private fun setupListeners() {&#10;        // Hydration Reminders&#10;        switchWaterReminders.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            sharedPreferences.edit().putBoolean(&quot;water_reminders_enabled&quot;, isChecked).apply()&#10;            showToast(&quot;Water reminders ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#10;            if (isChecked) {&#10;                // Start the hydration reminder with current interval&#10;                startHydrationReminder()&#10;            } else {&#10;                // Stop the hydration reminder service&#10;                stopHydrationReminder()&#10;            }&#10;        }&#10;&#10;        spinnerReminderInterval.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#10;                sharedPreferences.edit().putInt(&quot;reminder_interval&quot;, position).apply()&#10;                val intervals = resources.getStringArray(R.array.reminder_intervals)&#10;                showToast(&quot;Reminder interval set to ${intervals[position]}&quot;)&#10;&#10;                // Restart reminders with new interval if enabled&#10;                if (switchWaterReminders.isChecked) {&#10;                    startHydrationReminder()&#10;                }&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#10;        }&#10;&#10;        switchNotificationSound.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            sharedPreferences.edit().putBoolean(&quot;notification_sound&quot;, isChecked).apply()&#10;            showToast(&quot;Notification sound ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#10;        }&#10;&#10;        switchVibration.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            sharedPreferences.edit().putBoolean(&quot;vibration_enabled&quot;, isChecked).apply()&#10;            showToast(&quot;Vibration ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#10;        }&#10;&#10;        // App Preferences&#10;        spinnerTheme.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#10;                sharedPreferences.edit().putInt(&quot;theme&quot;, position).apply()&#10;                showToast(&quot;Theme setting saved - restart app to see changes&quot;)&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#10;        }&#10;&#10;        spinnerFontSize.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#10;                sharedPreferences.edit().putInt(&quot;font_size&quot;, position).apply()&#10;                showToast(&quot;Font size setting saved&quot;)&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#10;        }&#10;&#10;        // Advanced Features&#10;        spinnerChartDuration.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#10;                sharedPreferences.edit().putInt(&quot;chart_duration&quot;, position).apply()&#10;                showToast(&quot;Chart duration updated&quot;)&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#10;        }&#10;&#10;        switchHomeWidget.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            sharedPreferences.edit().putBoolean(&quot;home_widget_enabled&quot;, isChecked).apply()&#10;            showToast(&quot;Home widget ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#10;        }&#10;&#10;        switchStepCounter.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            sharedPreferences.edit().putBoolean(&quot;step_counter_enabled&quot;, isChecked).apply()&#10;            showToast(&quot;Step counter ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#10;        }&#10;&#10;        switchShakeDetection.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            sharedPreferences.edit().putBoolean(&quot;shake_detection_enabled&quot;, isChecked).apply()&#10;            showToast(&quot;Shake detection ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#10;        }&#10;&#10;        // Data Management - Backup Data&#10;        btnBackupData.setOnClickListener {&#10;            // TODO: Implement backup data functionality&#10;            showToast(&quot;Backup data feature is not yet implemented&quot;)&#10;        }&#10;&#10;        // Data Management - Reinstall App&#10;        btnReinstall.setOnClickListener {&#10;            // TODO: Implement reinstall app functionality&#10;            showToast(&quot;Reinstall app feature is not yet implemented&quot;)&#10;        }&#10;&#10;        // Data Management - Clear Habits&#10;        btnClearHabits.setOnClickListener {&#10;            showConfirmationDialog(&#10;                &quot;Clear All Habits&quot;,&#10;                &quot;This will permanently delete all your habits and their progress. Are you sure?&quot;,&#10;                &quot;habits&quot;&#10;            )&#10;        }&#10;&#10;        // Data Management - Clear Moods&#10;        btnClearMoods.setOnClickListener {&#10;            showConfirmationDialog(&#10;                &quot;Clear Mood History&quot;,&#10;                &quot;This will permanently delete all your mood entries. Are you sure?&quot;,&#10;                &quot;moods&quot;&#10;            )&#10;        }&#10;&#10;        // Data Management - Clear All Data&#10;        btnClearAllData.setOnClickListener {&#10;            showConfirmationDialog(&#10;                &quot;Clear All Data&quot;,&#10;                &quot;This will permanently delete ALL your wellness data including habits, moods, and settings. This cannot be undone!&quot;,&#10;                &quot;all&quot;&#10;            )&#10;        }&#10;&#10;        // Test Notification button - Send a test notification&#10;        btnTestNotification.setOnClickListener {&#10;            sendTestNotification()&#10;        }&#10;    }&#10;&#10;    private fun startHydrationReminder() {&#10;        try {&#10;            val intervalIndex = sharedPreferences.getInt(&quot;reminder_interval&quot;, 1)&#10;            val intervalMinutes = HydrationReminderService.getIntervalMinutes(intervalIndex)&#10;            HydrationReminderService.scheduleHydrationReminder(requireContext(), intervalMinutes)&#10;&#10;            // Show appropriate message based on interval&#10;            val message = if (intervalIndex == 0) {&#10;                &quot;Hydration reminders scheduled every 5 seconds (Test Mode)&quot;&#10;            } else {&#10;                &quot;Hydration reminders scheduled every ${if (intervalMinutes &lt; 60) &quot;${intervalMinutes} minutes&quot; else &quot;${intervalMinutes/60} hour(s)&quot;}&quot;&#10;            }&#10;            showToast(message)&#10;        } catch (e: Exception) {&#10;            // Handle any permission or scheduling errors&#10;            showToast(&quot;Error setting up reminders. Please check app permissions.&quot;)&#10;            // Disable the switch if scheduling fails&#10;            switchWaterReminders.isChecked = false&#10;            sharedPreferences.edit().putBoolean(&quot;water_reminders_enabled&quot;, false).apply()&#10;        }&#10;    }&#10;&#10;    private fun stopHydrationReminder() {&#10;        try {&#10;            HydrationReminderService.cancelHydrationReminder(requireContext())&#10;            showToast(&quot;Hydration reminders cancelled&quot;)&#10;        } catch (e: Exception) {&#10;            showToast(&quot;Error cancelling reminders&quot;)&#10;        }&#10;    }&#10;&#10;    private fun showConfirmationDialog(title: String, message: String, dataType: String) {&#10;        val builder = AlertDialog.Builder(requireContext())&#10;        builder.setTitle(title)&#10;        builder.setMessage(message)&#10;&#10;        builder.setPositiveButton(&quot;Confirm&quot;) { dialog, which -&gt;&#10;            when (dataType) {&#10;                &quot;habits&quot; -&gt; clearHabitsData()&#10;                &quot;moods&quot; -&gt; clearMoodsData()&#10;                &quot;all&quot; -&gt; clearAllData()&#10;            }&#10;        }&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;) { dialog, which -&gt;&#10;            dialog.dismiss()&#10;        }&#10;&#10;        val dialog = builder.create()&#10;        dialog.show()&#10;    }&#10;&#10;    private fun clearHabitsData() {&#10;        // Clear habits data from SharedPreferences&#10;        val habitsPrefs = requireActivity().getSharedPreferences(&quot;habits_data&quot;, Context.MODE_PRIVATE)&#10;        habitsPrefs.edit().clear().apply()&#10;        showToast(&quot;All habits cleared successfully&quot;)&#10;    }&#10;&#10;    private fun clearMoodsData() {&#10;        // Clear moods data from SharedPreferences&#10;        val moodsPrefs = requireActivity().getSharedPreferences(&quot;moods_data&quot;, Context.MODE_PRIVATE)&#10;        moodsPrefs.edit().clear().apply()&#10;        showToast(&quot;Mood history cleared successfully&quot;)&#10;    }&#10;&#10;    private fun clearAllData() {&#10;        // Clear all app data&#10;        val habitsPrefs = requireActivity().getSharedPreferences(&quot;habits_data&quot;, Context.MODE_PRIVATE)&#10;        val moodsPrefs = requireActivity().getSharedPreferences(&quot;moods_data&quot;, Context.MODE_PRIVATE)&#10;&#10;        habitsPrefs.edit().clear().apply()&#10;        moodsPrefs.edit().clear().apply()&#10;        sharedPreferences.edit().clear().apply()&#10;&#10;        // Reload default settings&#10;        loadSettings()&#10;&#10;        showToast(&quot;All data cleared successfully&quot;)&#10;    }&#10;&#10;    private fun showToast(message: String) {&#10;        Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()&#10;    }&#10;&#10;    private fun sendTestNotification() {&#10;        try {&#10;            // Start the hydration reminder service immediately to show a test notification&#10;            val serviceIntent = Intent(requireContext(), HydrationReminderService::class.java)&#10;            requireContext().startService(serviceIntent)&#10;            showToast(&quot;Test notification sent! Check your notification panel.&quot;)&#10;        } catch (e: Exception) {&#10;            showToast(&quot;Error sending test notification: ${e.message}&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.wellness.fragments&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.content.Intent&#13;&#10;import android.content.SharedPreferences&#13;&#10;import android.os.Bundle&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.View&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.*&#13;&#10;import androidx.appcompat.app.AlertDialog&#13;&#10;import androidx.fragment.app.Fragment&#13;&#10;import com.example.wellness.R&#13;&#10;import com.example.wellness.services.HydrationReminderService&#13;&#10;import com.example.wellness.utils.ThemeManager&#13;&#10;&#13;&#10;class SettingsFragment : Fragment() {&#13;&#10;&#13;&#10;    private lateinit var sharedPreferences: SharedPreferences&#13;&#10;&#13;&#10;    // Hydration Reminders&#13;&#10;    private lateinit var switchWaterReminders: Switch&#13;&#10;    private lateinit var spinnerReminderInterval: Spinner&#13;&#10;    private lateinit var switchNotificationSound: Switch&#13;&#10;    private lateinit var switchVibration: Switch&#13;&#10;    private lateinit var btnTestNotification: Button&#13;&#10;&#13;&#10;    // App Preferences&#13;&#10;    private lateinit var spinnerTheme: Spinner&#13;&#10;    private lateinit var spinnerFontSize: Spinner&#13;&#10;&#13;&#10;    // Data Management&#13;&#10;    private lateinit var btnBackupData: Button&#13;&#10;    private lateinit var btnReinstall: Button&#13;&#10;    private lateinit var btnClearHabits: Button&#13;&#10;    private lateinit var btnClearMoods: Button&#13;&#10;    private lateinit var btnClearAllData: Button&#13;&#10;&#13;&#10;    // Advanced Features&#13;&#10;    private lateinit var spinnerChartDuration: Spinner&#13;&#10;    private lateinit var switchHomeWidget: Switch&#13;&#10;    private lateinit var switchStepCounter: Switch&#13;&#10;    private lateinit var switchShakeDetection: Switch&#13;&#10;&#13;&#10;    override fun onCreateView(&#13;&#10;        inflater: LayoutInflater,&#13;&#10;        container: ViewGroup?,&#13;&#10;        savedInstanceState: Bundle?&#13;&#10;    ): View? {&#13;&#10;        val view = inflater.inflate(R.layout.fragment_settings, container, false)&#13;&#10;&#13;&#10;        // Initialize SharedPreferences&#13;&#10;        sharedPreferences = requireActivity().getSharedPreferences(&quot;wellness_settings&quot;, Context.MODE_PRIVATE)&#13;&#10;&#13;&#10;        // Initialize views&#13;&#10;        initializeViews(view)&#13;&#10;&#13;&#10;        // Load saved settings&#13;&#10;        loadSettings()&#13;&#10;&#13;&#10;        // Set up listeners&#13;&#10;        setupListeners()&#13;&#10;&#13;&#10;        return view&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun initializeViews(view: View) {&#13;&#10;        // Hydration Reminders&#13;&#10;        switchWaterReminders = view.findViewById(R.id.switch_water_reminders)&#13;&#10;        spinnerReminderInterval = view.findViewById(R.id.spinner_reminder_interval)&#13;&#10;        switchNotificationSound = view.findViewById(R.id.switch_notification_sound)&#13;&#10;        switchVibration = view.findViewById(R.id.switch_vibration)&#13;&#10;        btnTestNotification = view.findViewById(R.id.btn_test_notification)&#13;&#10;&#13;&#10;        // App Preferences&#13;&#10;        spinnerTheme = view.findViewById(R.id.spinner_theme)&#13;&#10;        spinnerFontSize = view.findViewById(R.id.spinner_font_size)&#13;&#10;&#13;&#10;        // Data Management&#13;&#10;        btnBackupData = view.findViewById(R.id.btn_backup_data)&#13;&#10;        btnReinstall = view.findViewById(R.id.btn_reinstall)&#13;&#10;        btnClearHabits = view.findViewById(R.id.btn_clear_habits)&#13;&#10;        btnClearMoods = view.findViewById(R.id.btn_clear_moods)&#13;&#10;        btnClearAllData = view.findViewById(R.id.btn_clear_all_data)&#13;&#10;&#13;&#10;        // Advanced Features&#13;&#10;        spinnerChartDuration = view.findViewById(R.id.spinner_chart_duration)&#13;&#10;        switchHomeWidget = view.findViewById(R.id.switch_home_widget)&#13;&#10;        switchStepCounter = view.findViewById(R.id.switch_step_counter)&#13;&#10;        switchShakeDetection = view.findViewById(R.id.switch_shake_detection)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun loadSettings() {&#13;&#10;        // Load hydration settings&#13;&#10;        switchWaterReminders.isChecked = sharedPreferences.getBoolean(&quot;water_reminders_enabled&quot;, false)&#13;&#10;        spinnerReminderInterval.setSelection(sharedPreferences.getInt(&quot;reminder_interval&quot;, 2)) // Default: 1 hour (index 2)&#13;&#10;        switchNotificationSound.isChecked = sharedPreferences.getBoolean(&quot;notification_sound&quot;, true)&#13;&#10;        switchVibration.isChecked = sharedPreferences.getBoolean(&quot;vibration_enabled&quot;, true)&#13;&#10;&#13;&#10;        // Load app preferences - use ThemeManager to get current theme&#13;&#10;        spinnerTheme.setSelection(ThemeManager.getCurrentTheme(requireContext()))&#13;&#10;        spinnerFontSize.setSelection(sharedPreferences.getInt(&quot;font_size&quot;, 1)) // Default: Medium&#13;&#10;&#13;&#10;        // Load advanced features&#13;&#10;        spinnerChartDuration.setSelection(sharedPreferences.getInt(&quot;chart_duration&quot;, 0)) // Default: 1 Week&#13;&#10;        switchHomeWidget.isChecked = sharedPreferences.getBoolean(&quot;home_widget_enabled&quot;, false)&#13;&#10;        switchStepCounter.isChecked = sharedPreferences.getBoolean(&quot;step_counter_enabled&quot;, false)&#13;&#10;        switchShakeDetection.isChecked = sharedPreferences.getBoolean(&quot;shake_detection_enabled&quot;, false)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun setupListeners() {&#13;&#10;        // Hydration Reminders&#13;&#10;        switchWaterReminders.setOnCheckedChangeListener { _, isChecked -&gt;&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;water_reminders_enabled&quot;, isChecked).apply()&#13;&#10;            showToast(&quot;Water reminders ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#13;&#10;            if (isChecked) {&#13;&#10;                // Start the hydration reminder with current interval&#13;&#10;                startHydrationReminder()&#13;&#10;            } else {&#13;&#10;                // Stop the hydration reminder service&#13;&#10;                stopHydrationReminder()&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        spinnerReminderInterval.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#13;&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#13;&#10;                sharedPreferences.edit().putInt(&quot;reminder_interval&quot;, position).apply()&#13;&#10;                val intervals = resources.getStringArray(R.array.reminder_intervals)&#13;&#10;                showToast(&quot;Reminder interval set to ${intervals[position]}&quot;)&#13;&#10;&#13;&#10;                // Restart reminders with new interval if enabled&#13;&#10;                if (switchWaterReminders.isChecked) {&#13;&#10;                    startHydrationReminder()&#13;&#10;                }&#13;&#10;            }&#13;&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#13;&#10;        }&#13;&#10;&#13;&#10;        switchNotificationSound.setOnCheckedChangeListener { _, isChecked -&gt;&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;notification_sound&quot;, isChecked).apply()&#13;&#10;            showToast(&quot;Notification sound ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        switchVibration.setOnCheckedChangeListener { _, isChecked -&gt;&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;vibration_enabled&quot;, isChecked).apply()&#13;&#10;            showToast(&quot;Vibration ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        // App Preferences - Updated theme listener&#13;&#10;        spinnerTheme.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#13;&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#13;&#10;                // Only apply theme if it's different from current selection&#13;&#10;                val currentTheme = ThemeManager.getCurrentTheme(requireContext())&#13;&#10;                if (position != currentTheme) {&#13;&#10;                    // Set the new theme using ThemeManager&#13;&#10;                    ThemeManager.setTheme(requireContext(), position)&#13;&#10;                    &#13;&#10;                    val themeNames = arrayOf(&quot;Light Mode&quot;, &quot;Dark Mode&quot;, &quot;System Default&quot;)&#13;&#10;                    showToast(&quot;Theme changed to ${themeNames[position]}&quot;)&#13;&#10;                    &#13;&#10;                    // Recreate activity to apply theme immediately&#13;&#10;                    requireActivity().recreate()&#13;&#10;                }&#13;&#10;            }&#13;&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#13;&#10;        }&#13;&#10;&#13;&#10;        spinnerFontSize.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#13;&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#13;&#10;                sharedPreferences.edit().putInt(&quot;font_size&quot;, position).apply()&#13;&#10;                showToast(&quot;Font size setting saved&quot;)&#13;&#10;            }&#13;&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#13;&#10;        }&#13;&#10;&#13;&#10;        // Advanced Features&#13;&#10;        spinnerChartDuration.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#13;&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;, view: View?, position: Int, id: Long) {&#13;&#10;                sharedPreferences.edit().putInt(&quot;chart_duration&quot;, position).apply()&#13;&#10;                showToast(&quot;Chart duration updated&quot;)&#13;&#10;            }&#13;&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;) {}&#13;&#10;        }&#13;&#10;&#13;&#10;        switchHomeWidget.setOnCheckedChangeListener { _, isChecked -&gt;&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;home_widget_enabled&quot;, isChecked).apply()&#13;&#10;            showToast(&quot;Home widget ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        switchStepCounter.setOnCheckedChangeListener { _, isChecked -&gt;&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;step_counter_enabled&quot;, isChecked).apply()&#13;&#10;            showToast(&quot;Step counter ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        switchShakeDetection.setOnCheckedChangeListener { _, isChecked -&gt;&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;shake_detection_enabled&quot;, isChecked).apply()&#13;&#10;            showToast(&quot;Shake detection ${if (isChecked) &quot;enabled&quot; else &quot;disabled&quot;}&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        // Data Management - Backup Data&#13;&#10;        btnBackupData.setOnClickListener {&#13;&#10;            // TODO: Implement backup data functionality&#13;&#10;            showToast(&quot;Backup data feature is not yet implemented&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        // Data Management - Reinstall App&#13;&#10;        btnReinstall.setOnClickListener {&#13;&#10;            // TODO: Implement reinstall app functionality&#13;&#10;            showToast(&quot;Reinstall app feature is not yet implemented&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        // Data Management - Clear Habits&#13;&#10;        btnClearHabits.setOnClickListener {&#13;&#10;            showConfirmationDialog(&#13;&#10;                &quot;Clear All Habits&quot;,&#13;&#10;                &quot;This will permanently delete all your habits and their progress. Are you sure?&quot;,&#13;&#10;                &quot;habits&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Data Management - Clear Moods&#13;&#10;        btnClearMoods.setOnClickListener {&#13;&#10;            showConfirmationDialog(&#13;&#10;                &quot;Clear Mood History&quot;,&#13;&#10;                &quot;This will permanently delete all your mood entries. Are you sure?&quot;,&#13;&#10;                &quot;moods&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Data Management - Clear All Data&#13;&#10;        btnClearAllData.setOnClickListener {&#13;&#10;            showConfirmationDialog(&#13;&#10;                &quot;Clear All Data&quot;,&#13;&#10;                &quot;This will permanently delete ALL your wellness data including habits, moods, and settings. This cannot be undone!&quot;,&#13;&#10;                &quot;all&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Test Notification button - Send a test notification&#13;&#10;        btnTestNotification.setOnClickListener {&#13;&#10;            sendTestNotification()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun startHydrationReminder() {&#13;&#10;        try {&#13;&#10;            val intervalIndex = sharedPreferences.getInt(&quot;reminder_interval&quot;, 1)&#13;&#10;            val intervalMinutes = HydrationReminderService.getIntervalMinutes(intervalIndex)&#13;&#10;            HydrationReminderService.scheduleHydrationReminder(requireContext(), intervalMinutes)&#13;&#10;&#13;&#10;            // Show appropriate message based on interval&#13;&#10;            val message = if (intervalIndex == 0) {&#13;&#10;                &quot;Hydration reminders scheduled every 5 seconds (Test Mode)&quot;&#13;&#10;            } else {&#13;&#10;                &quot;Hydration reminders scheduled every ${if (intervalMinutes &lt; 60) &quot;${intervalMinutes} minutes&quot; else &quot;${intervalMinutes/60} hour(s)&quot;}&quot;&#13;&#10;            }&#13;&#10;            showToast(message)&#13;&#10;        } catch (e: Exception) {&#13;&#10;            // Handle any permission or scheduling errors&#13;&#10;            showToast(&quot;Error setting up reminders. Please check app permissions.&quot;)&#13;&#10;            // Disable the switch if scheduling fails&#13;&#10;            switchWaterReminders.isChecked = false&#13;&#10;            sharedPreferences.edit().putBoolean(&quot;water_reminders_enabled&quot;, false).apply()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun stopHydrationReminder() {&#13;&#10;        try {&#13;&#10;            HydrationReminderService.cancelHydrationReminder(requireContext())&#13;&#10;            showToast(&quot;Hydration reminders cancelled&quot;)&#13;&#10;        } catch (e: Exception) {&#13;&#10;            showToast(&quot;Error cancelling reminders&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showConfirmationDialog(title: String, message: String, dataType: String) {&#13;&#10;        val builder = AlertDialog.Builder(requireContext())&#13;&#10;        builder.setTitle(title)&#13;&#10;        builder.setMessage(message)&#13;&#10;&#13;&#10;        builder.setPositiveButton(&quot;Confirm&quot;) { dialog, which -&gt;&#13;&#10;            when (dataType) {&#13;&#10;                &quot;habits&quot; -&gt; clearHabitsData()&#13;&#10;                &quot;moods&quot; -&gt; clearMoodsData()&#13;&#10;                &quot;all&quot; -&gt; clearAllData()&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        builder.setNegativeButton(&quot;Cancel&quot;) { dialog, which -&gt;&#13;&#10;            dialog.dismiss()&#13;&#10;        }&#13;&#10;&#13;&#10;        val dialog = builder.create()&#13;&#10;        dialog.show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun clearHabitsData() {&#13;&#10;        // Clear habits data from SharedPreferences&#13;&#10;        val habitsPrefs = requireActivity().getSharedPreferences(&quot;habits_data&quot;, Context.MODE_PRIVATE)&#13;&#10;        habitsPrefs.edit().clear().apply()&#13;&#10;        showToast(&quot;All habits cleared successfully&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun clearMoodsData() {&#13;&#10;        // Clear moods data from SharedPreferences&#13;&#10;        val moodsPrefs = requireActivity().getSharedPreferences(&quot;moods_data&quot;, Context.MODE_PRIVATE)&#13;&#10;        moodsPrefs.edit().clear().apply()&#13;&#10;        showToast(&quot;Mood history cleared successfully&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun clearAllData() {&#13;&#10;        // Clear all app data&#13;&#10;        val habitsPrefs = requireActivity().getSharedPreferences(&quot;habits_data&quot;, Context.MODE_PRIVATE)&#13;&#10;        val moodsPrefs = requireActivity().getSharedPreferences(&quot;moods_data&quot;, Context.MODE_PRIVATE)&#13;&#10;&#13;&#10;        habitsPrefs.edit().clear().apply()&#13;&#10;        moodsPrefs.edit().clear().apply()&#13;&#10;        sharedPreferences.edit().clear().apply()&#13;&#10;&#13;&#10;        // Reload default settings&#13;&#10;        loadSettings()&#13;&#10;&#13;&#10;        showToast(&quot;All data cleared successfully&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun showToast(message: String) {&#13;&#10;        Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun sendTestNotification() {&#13;&#10;        try {&#13;&#10;            // Start the hydration reminder service immediately to show a test notification&#13;&#10;            val serviceIntent = Intent(requireContext(), HydrationReminderService::class.java)&#13;&#10;            requireContext().startService(serviceIntent)&#13;&#10;            showToast(&quot;Test notification sent! Check your notification panel.&quot;)&#13;&#10;        } catch (e: Exception) {&#13;&#10;            showToast(&quot;Error sending test notification: ${e.message}&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/wellness/utils/ThemeManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/wellness/utils/ThemeManager.kt" />
              <option name="updatedContent" value="package com.example.wellness.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.appcompat.app.AppCompatDelegate&#10;&#10;object ThemeManager {&#10;    private const val PREF_NAME = &quot;wellness_settings&quot;&#10;    private const val THEME_KEY = &quot;theme&quot;&#10;    &#10;    const val THEME_LIGHT = 0&#10;    const val THEME_DARK = 1&#10;    const val THEME_SYSTEM = 2&#10;    &#10;    fun applyTheme(context: Context) {&#10;        val sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)&#10;        val themeMode = sharedPreferences.getInt(THEME_KEY, THEME_SYSTEM)&#10;        &#10;        when (themeMode) {&#10;            THEME_LIGHT -&gt; AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)&#10;            THEME_DARK -&gt; AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)&#10;            THEME_SYSTEM -&gt; AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)&#10;        }&#10;    }&#10;    &#10;    fun setTheme(context: Context, themeMode: Int) {&#10;        val sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)&#10;        sharedPreferences.edit().putInt(THEME_KEY, themeMode).apply()&#10;        applyTheme(context)&#10;    }&#10;    &#10;    fun getCurrentTheme(context: Context): Int {&#10;        val sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)&#10;        return sharedPreferences.getInt(THEME_KEY, THEME_SYSTEM)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>